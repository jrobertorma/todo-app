Dev log
04/02/2021
Start of the project, first commit

07/02/2021
Definition of objectives

08/02/2021
App design

09/02/2021
Research
Add react-router

10/02/2021
Files structure, react-router testing

11/02/2021
Adding empty components and navigation

12/02/2021
Adding more empty components, adding firebase

13/02/2021
Installing firebase, creating env vars

14/02/2021
Adding firebase config and using react context api to provide firebase to all app's components

15/02/2021
Adding firebase auth api to src\components\Firebase\firebase.js (untracked by git, it has the firebase config)

16/02/2021
Research and comments

17-20/02/2021
Adding signUp components

21-22/02/2021
Adding signIn components

23/02/2021
Adding signOut component

24-28/02/2021
Adding session handling

01/03/2021
Adding session handling

02/03/2021
Adding password management

PRIMARY GOALS
Build a todo-app from scratch, using react, redux and firebase.

What do you need to create the app?
	1. Initialize project (done)

	2.1 Design user cases, user stories, or something to establish the data flows and needed operations
	2.2 App design (UI and functionalities)

	3.1 Build backend (it is going to be mostly firebase configuration)
	3.2 Build front-end (components)
	3.3 Wire back and front ends
	3.4 Test
	3.5 First MVP release

	4 Project documentation

2. APP DESIGN
	2.1 User cases
		There is going to be just one user (its name will be 'user', lol).
		'User' will have 3 basic user cases

		a) See to-do list: You call the firebase data and pass it to redux, you'll need to create a reducer, some actions and wire them to a data rendering component.
		b) Create a to-do list item: You will need a form, validate it (i guess we will use react-final-form) and use it to update the firebase data, I dont' know if redux is needed right here.
		c) Edit a to-do list item
			First you'll need the item data (fetching data from firebase)
			Then you'll need to show the data
			And lastly (trough a form) you will make the updates to firebase
			The delete item is going to be a similar operation

	2.2 UI and functionalities design
		The app will have two 'models' (in terms of design, not necessarily in code): User and Task
		
		USER
			The app will be able to make all CRUD operations to this 'model'
			This 'model' is required to implement the Login functionality
			I dont' know yet all the components this 'model' needs (I hope firebase will take care of most of them), but at least some sort 'Login' will be needed for this to work. 
		
		TASK
			Again, the app will be able to make all CRUD operations to this 'model'
			This will be the 'core' of the app (its a to-do app after all, lol)

			- TaskList
			- TaskCard
			- TaskForm (for both 'new task' and 'edit task' user cases)

3. APP DEVELOPMENT
	3.1 BACKEND: Firstly you need to check Firebase and React integrations to create the login, and all the 'users' CRUD. We are going to use this tutorial https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial (lol). And, in order for this stuff to work you need to add react-router to the app and play a little with some testing components. So we will be working simultaneously with the 'backend' and the frontend.

		3.1.1 Install firebase
			
			'yarn add firebase'

		3.1.2 Creating Firebase backend

			3.1.2.1 Create a firebase account and go to the console (https://console.firebase.google.com/)
			3.1.2.2 Create project, get configuration object, be careful lol (https://firebase.google.com/docs/web/setup)
			3.1.2.3 Create configuration variables, we are going to use the .env.development.local file to store the api keys, note that this is only for development, you should store production secret keys on the backend (https://stackoverflow.com/questions/48699820/how-do-i-hide-api-key-in-create-react-app)
			3.1.2.4 Add firebase support through react's context api (src\components\Firebase\context.js)
			3.1.2.5 Add firebase auth api support to the firebase class (on src\components\Firebase\firebase.js see the notes at the end of this file)

	3.2 FRONTEND: The stuff the user see and interacts with.
		3.2.1 Add react-router to the app (https://reactrouter.com/web/guides/quick-start)
			
			'yarn add react-router-dom'
			
			Then you can import the react-router components that deal with the routes and links.
			e.g.

				import {
				  BrowserRouter as Router,
				  Switch,
				  Route,
				  Link
				} from "react-router-dom";

		3.2.2 Create file structure for the components, make sure to follow a legible structure e.g. src/components/ {all the components}; src/containers; etc.

		3.2.3 Add react-router and write the routes constants and <Navigation> component (src\constants\routes.js and src\components\Navigation\index.js)

		3.2.4 Add dummy components for route testing (we will be updating them later)

		3.2.5 Create Auth Components

			3.2.5.1 SignUp components
			3.2.5.2 SignIn components
			3.2.5.3 SignOut components

	3.3 CONNECT FRONTEND AND BACKEND
		3.3.1 Set firebase context
		3.3.2 Add session handling
		3.3.3 Add password management

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * * * * * * * * N O T E S * * * * * * * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

---------------------- FIREBASE ----------------------

These are the contents of 'src\components\Firebase\firebase.js', the config file, it is important to note that you shouldn't use this kind of 
file on a production app, the best practice is to set the firebase connection through a backend (e.g. express).

import app from "firebase/app";
import 'firebase/auth'

const config = {
 /*
 	The firebase configuration object or the env vars callings (just for development stage)
 */
};

class Firebase {
    constructor() {
        app.initializeApp(config);

        this.auth = app.auth();

        // *** Auth API ***

        doCreateUserWithEmailAndPassword = (email, password) =>
        this.auth.createUserWithEmailAndPassword(email, password);

        doSignInWithEmailAndPassword = (email, password) =>
        this.auth.signInWithEmailAndPassword(email, password);

        doSignOut = () => this.auth.signOut();

        doPasswordReset = email => this.auth.sendPasswordResetEmail(email);

        doPasswordUpdate = password =>
          this.auth.currentUser.updatePassword(password);
    }
}

export default Firebase;

You also may want to add a firebase context to the app, so you don't need to create a firebase app instance for every component you use.
There is more info at https://reactjs.org/docs/context.html#reactcreatecontext.

We do that in the src\components\Firebase\context.js file as:

	import React from 'react';

	const FirebaseContext = React.createContext(null);

	export const withFirebase = Component => props => (
	    <FirebaseContext.Consumer>
	      {firebase => <Component {...props} firebase={firebase} />}
	    </FirebaseContext.Consumer>
	);

	export default FirebaseContext;

	export { withFirebase };

We can use the firebase context like this:

	const SignUpForm = withRouter(withFirebase(SignUpFormBase));

The SignUpFormBase component has this code on its onSubmit event handler:

	this.props.firebase
        .doCreateUserWithEmailAndPassword(email, passwordOne)
        .then(authUser => {
            this.setState({ ...INITIAL_STATE });
            this.props.history.push(ROUTES.HOME); /*redirect using history props 
            (we can do this because we added withRouter to the SignUpForm component (line 122))*/
        })
        .catch(error => {
            this.setState({ error });
        });

Here we are using the Auth API we defined at 'src\components\Firebase\firebase.js'. The call to doCreateUserWithEmailAndPassword triggers
the firebase this.auth.createUserWithEmailAndPassword(email, password); function (you can see the docs for this kind of auth method at: https://firebase.google.com/docs/auth/web/password-auth, here you'll find the functions we can use with firebase.auth() on 'src\components\Firebase\firebase.js').

---------------------- OTHER INTERESTING STUFF ABOUT SignUpFormBase ----------------------

I didn't bind the handlers and they still work!, and that is because we use arrow functions to define them 
(see: https://medium.com/@joespinelli_6190/using-arrow-functions-to-avoid-binding-this-in-react-5d7402eec64)

Also, as we are dealing with multiple input fields, the onChange handler makes use of the event.target.name var, 
we can read at the docs on this matter:

"When you need to handle multiple controlled input elements, you can add a name attribute to each element 
and let the handler function choose what to do based on the value of event.target.name."

The handler example is:

handleInputChange(event) {
	const target = event.target;
	const value = target.type === 'checkbox' ? target.checked : target.value;
	const name = target.name;

	this.setState({
  		[name]: value
	});
} 

see https://reactjs.org/docs/forms.html#handling-multiple-inputs.

---------------------- SESSION HANDLING ----------------------
Once we have the 'users loop' components (i.e. signin, login and logout), it is time to add session handling capabilities
to the app.

We need to let every component concerned on the session state, to know about the state of the loged in user.

From the book: "Logic regarding the current authenticated user needs to be stored and made accessible to other components."

Most developers use redux or mobx to achieve that.

But, we're going to use the react global state management instead.

So we need to track the authenticated user's state from the root component, and then pass it down to the children components 
that are interested in the logged in user (e.g. the nav, so you don't show the sign out button to a non logged in user). 

"Firebase offers a listener function to get the authenticated user from Firebase" (onAuthStateChanged), we use it in the App component.

See the src\components\App\index.js file.

We export app as a parameter of 'withFirebase', so we can use firebase functions within the component.

Next we use the componentDidMount function to add a listener to the firebase auth state (see the docs at: 
https://firebase.google.com/docs/auth/web/manage-users), this is called an 'observer'.

Inside the 'observer' function you can define what happens when a user is logged in and what happens when is not logged in.

We change the value of the 'authUser' state and pass it to the 'Navigation' component.

That component catches the 'authUser' value as a prop and then pass it as a condition to a ternary operator to render the logged or non loged navigation links.

It may be tedious to pass all the authUser state to every component through all the 'component tree', just for a couple of them to actually use it.

That is why we are going to use (again) the react context api to provide the session's state just to the components that use it.

First we create the context that is going to store the state (src\components\Session\context.js).

Then we create a withAuthentication class, that is going to manage the firebase auth state, this means that we will have to move all the authUser logic to this component from the App component (you know, all the 'observer' and 'onAuthStateChanged' stuff, see src\components\Session\withAuthentication.js).

Then we add the auth 'observer' to the context

	<AuthUserContext.Provider value={this.state.authUser}> //the context, we add the authUser as a prop to any component that calls withAuthentication
        <Component {...this.props} />
    </AuthUserContext.Provider>

Now we can use the authUser state anywhere, e.g. in src\components\Navigation\index.js

	<AuthUserContext.Consumer> //we call the context and then use its props
		{ 
	  		(authUser) =>  authUser ? <NavigationAuth /> : <NavigationNonAuth /> 
		}
	</AuthUserContext.Consumer>

It is important to note that we need to allow the component tree to use the function, therefore we added it in the App component's export:

	export default withAuthentication(App); //We can use withAuthentication in all the App's children

COOL LINKS:
https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial
https://www.robinwieruch.de/complete-firebase-authentication-react-tutorial#firebase-in-react-setup

https://firebase.google.com/docs/auth/web/firebaseui?authuser=1